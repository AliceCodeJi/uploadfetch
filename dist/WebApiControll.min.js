!function(e){var t={};function a(r){if(t[r])return t[r].exports;var n=t[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,a),n.l=!0,n.exports}a.m=e,a.c=t,a.d=function(r,n,e){a.o(r,n)||Object.defineProperty(r,n,{enumerable:!0,get:e})},a.r=function(r){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(r,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(r,"__esModule",{value:!0})},a.t=function(n,r){if(1&r&&(n=a(n)),8&r)return n;if(4&r&&"object"==typeof n&&n&&n.__esModule)return n;var e=Object.create(null);if(a.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:n}),2&r&&"string"!=typeof n)for(var t in n)a.d(e,t,function(r){return n[r]}.bind(null,t));return e},a.n=function(r){var n=r&&r.__esModule?function(){return r.default}:function(){return r};return a.d(n,"a",n),n},a.o=function(r,n){return Object.prototype.hasOwnProperty.call(r,n)},a.p="",a(a.s="./src/scripts/WebApiControll.js")}({"./src/librarys/RequestHttp.ts":function(module,exports,__webpack_require__){"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Util_1 = __webpack_require__(/*! ./Util */ \"./src/librarys/Util.ts\");\r\nvar NetRequest = /** @class */ (function () {\r\n    function NetRequest(apiUrl, apiKey, debug) {\r\n        this.yUrl = apiUrl;\r\n        this.yKey = apiKey;\r\n        this.debug = debug;\r\n    }\r\n    /*\r\n    * 发送数据 api 接口请求*/\r\n    NetRequest.prototype.requestData = function (_method, _rootUrl, _optData) {\r\n        var _this = this;\r\n        if (this.debug)\r\n            Util_1.Util.printMsg(\"request \" + _rootUrl + \": \" + JSON.stringify(_optData), \"\");\r\n        var _url = this.yUrl + _rootUrl;\r\n        var _options = {};\r\n        if (_method === \"GET\") {\r\n            var _params = this.formatDataParams(_optData);\r\n            _options = {\r\n                method: _method,\r\n                headers: new Headers({ 'Connection': 'keep-alive', 'Content-Type': 'application/json; charset=utf-8' })\r\n            };\r\n            // @ts-ignore\r\n            _optData.s = Util_1.Util.returnHmacStr(\"MD5\", _params);\r\n            _url = this.formatData(_url, _optData);\r\n        }\r\n        else if (_method === \"POST\") {\r\n            var _params = this.formatDataParams(_optData);\r\n            // @ts-ignore\r\n            _optData.s = Util_1.Util.returnHmacStr(\"MD5\", _params);\r\n            _options = {\r\n                method: _method,\r\n                body: JSON.stringify(_optData),\r\n                headers: new Headers({ 'Connection': 'keep-alive', 'Content-Type': 'application/json; charset=utf-8' })\r\n            };\r\n        }\r\n        /*\r\n        * Promise: 返回值的代理*/\r\n        return new Promise(function (resolve, reject) {\r\n            if (navigator.onLine) {\r\n                var status_1 = 0; // 0 等待 1 完成 2 超时\r\n                var timer_1 = setTimeout(function () {\r\n                    if (status_1 === 0) {\r\n                        status_1 = 2;\r\n                        clearTimeout(timer_1);\r\n                        timer_1 = null;\r\n                        // fetch time out;\r\n                        reject('10001');\r\n                    }\r\n                }, 30 * 1000);\r\n                fetch(_url, _options)\r\n                    .then(function (response) { return response.json(); })\r\n                    .then(function (data) {\r\n                    if (status_1 !== 2) {\r\n                        clearTimeout(timer_1);\r\n                        timer_1 = null;\r\n                        status_1 = 1;\r\n                        if (_this.debug)\r\n                            Util_1.Util.printMsg(\"result \" + _rootUrl + \": \", data);\r\n                        resolve(data);\r\n                    }\r\n                }).catch(function (error) {\r\n                    clearTimeout(timer_1);\r\n                    timer_1 = null;\r\n                    status_1 = 1;\r\n                    reject(error);\r\n                });\r\n            }\r\n            else {\r\n                reject('10001');\r\n            }\r\n        });\r\n    };\r\n    /*\r\n    * 格式化 GET 请求的参数内容 生成新的 api 请求 url*/\r\n    NetRequest.prototype.formatData = function (url, params) {\r\n        var paramsArray = [];\r\n        // @ts-ignore\r\n        Object.keys(params).forEach(function (key) { return paramsArray.push(key + '=' + params[key]); });\r\n        if (paramsArray.length == 0)\r\n            return url;\r\n        if (url.search(/\\?/) === -1) {\r\n            url += '?' + paramsArray.join('&');\r\n        }\r\n        else {\r\n            url += '&' + paramsArray.join('&');\r\n        }\r\n        return url;\r\n    };\r\n    /*\r\n    * 格式化 GET 请求的参数内容 生成新的 api 请求 url*/\r\n    NetRequest.prototype.formatDataParams = function (params) {\r\n        var paramsArray = [];\r\n        // @ts-ignore\r\n        Object.keys(params).forEach(function (key) { return paramsArray.push(key + '=' + params[key]); });\r\n        paramsArray = paramsArray.sort();\r\n        return paramsArray.join('&');\r\n    };\r\n    return NetRequest;\r\n}());\r\nexports.NetRequest = NetRequest;\r\n\n\n//# sourceURL=webpack:///./src/librarys/RequestHttp.ts?")},"./src/librarys/Util.ts":function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nvar Util = /** @class */ (function () {\r\n    function Util() {\r\n    }\r\n    /*\r\n    * 打印消息\r\n    * @param msg 输出消息内容*/\r\n    Util.printMsg = function (msg, msg1) {\r\n        console.log(msg, msg1);\r\n    };\r\n    /*\r\n    * @desc 获取当前时间的时间戳\r\n    * @return 当前时间的时间戳*/\r\n    Util.getTimestamp = function () {\r\n        return (new Date()).getTime();\r\n    };\r\n    /*\r\n    * 性别解析\r\n    * @param gType 性别代码*/\r\n    Util.returnGender = function (gType) {\r\n        switch (gType) {\r\n            case "1":\r\n                return "男";\r\n            case "2":\r\n                return "女";\r\n            case "0":\r\n                return "不适用";\r\n        }\r\n    };\r\n    /*\r\n    * 证件类型解析\r\n    * @param iType 证件类型代码*/\r\n    Util.returnIdType = function (iType) {\r\n        switch (iType) {\r\n            case "1":\r\n                return "居民身份证";\r\n            case "2":\r\n                return "护照";\r\n            case "99":\r\n                return "其它";\r\n        }\r\n    };\r\n    /*\r\n    * 时间序列化\r\n    * @param date Time 对象\r\n    * @param type 输出类型*/\r\n    Util.returnTimeText = function (date, type) {\r\n        /* 目前无 type 定性 */\r\n        var year = date.getFullYear();\r\n        var month = date.getMonth() + 1;\r\n        var day = date.getDate();\r\n        var hour = date.getHours();\r\n        var minute = date.getMinutes();\r\n        var second = date.getSeconds();\r\n        // return [year, month, day].map(formatNumber).join(\'-\') + \' \' + [hour, minute].map(formatNumber).join(\':\')\r\n        var _m = month >= 10 ? month : "0" + month;\r\n        var _d = day >= 10 ? day : "0" + day;\r\n        return year + "年" + _m + "月" + _d + "日" + \' \' + [hour, minute].map(this.formatNumber).join(\':\');\r\n    };\r\n    /*\r\n    * 时间序列化\r\n    * @param date Time 对象\r\n    * @param type 输出类型*/\r\n    Util.returnTimeMinut = function (s) {\r\n        var o = { s: "", m: "", h: "" };\r\n        o.s = this.formatNumber(s % 60);\r\n        if (s > 59) {\r\n            o.m = this.formatNumber(parseInt((s / 60).toString()));\r\n        }\r\n        else {\r\n            o.m = "00";\r\n        }\r\n        return o;\r\n    };\r\n    Util.returnTimeDate = function (s) {\r\n        var date = new Date();\r\n        var year = date.getFullYear();\r\n        var month = date.getMonth() + 1;\r\n        var day = date.getDate();\r\n        var _month = month < 10 ? this.formatNumber(month) : month;\r\n        var _day = day < 10 ? this.formatNumber(day) : day;\r\n        return year + s + _month + s + _day;\r\n    };\r\n    /*\r\n    * 在单个数字前加 “0”\r\n    * @param n 需要在前增加 “0” 的数字*/\r\n    Util.formatNumber = function (n) {\r\n        var _n = n.toString();\r\n        return _n[1] ? _n : \'0\' + _n;\r\n    };\r\n    /*\r\n    * str 大写转换\r\n    * @param str: 待转换字符串\r\n    * @param onlyFirst: 是否需要转换为首字母大写\r\n    * @return 转后字符串，如传入空值则返回空*/\r\n    Util.stringUpper = function (str, onlyFirst) {\r\n        if (str.trim() != "") {\r\n            if (onlyFirst > 0) {\r\n                str = str.toLowerCase();\r\n                return str.replace(str[0], str[0].toUpperCase());\r\n            }\r\n            else {\r\n                return str.toUpperCase();\r\n            }\r\n        }\r\n        else {\r\n            return "";\r\n        }\r\n    };\r\n    /*\r\n    * str 小写转换\r\n    * @param str: 待转换字符串\r\n    * @param onlyFirst: 是否需要转换为首字母小写\r\n    * @return 转后字符串，如传入空值则返回空*/\r\n    Util.stringLower = function (str, onlyFirst) {\r\n        if (str.trim() != "") {\r\n            if (onlyFirst > 0) {\r\n                return str.replace(str[0], str[0].toLowerCase());\r\n            }\r\n            else {\r\n                return str.toLowerCase();\r\n            }\r\n        }\r\n        else {\r\n            return "";\r\n        }\r\n    };\r\n    /*\r\n    * @param hType: 加密类型，可选 sha1, MD5\r\n    * @param str: 待加密字符串\r\n    * @param md5Key: 加密密钥*/\r\n    Util.returnHmacStr = function (hType, str, key) {\r\n        if (hType == "sha1") {\r\n            // @ts-ignore\r\n            return CryptoJS.HmacSHA1(str, key).toString();\r\n        }\r\n        else if (hType == "MD5") {\r\n            // @ts-ignore\r\n            return Crypto.MD5(str, key);\r\n        }\r\n    };\r\n    Util.getQueryString = function (name) {\r\n        var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");\r\n        var reg_rewrite = new RegExp("(^|/)" + name + "/([^/]*)(/|$)", "i");\r\n        var r = window.location.search.substr(1).match(reg);\r\n        var q = window.location.pathname.substr(1).match(reg_rewrite);\r\n        if (r != null) {\r\n            return unescape(r[2]);\r\n        }\r\n        else if (q != null) {\r\n            return unescape(q[2]);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    Util.outPutArray = function (chart) { };\r\n    Util.getFileExtendingName = function (filename) {\r\n        // 文件扩展名匹配正则\r\n        var reg = /\\.[^\\.]+$/;\r\n        var matches = reg.exec(filename);\r\n        if (matches) {\r\n            return matches[0];\r\n        }\r\n        return \'\';\r\n    };\r\n    return Util;\r\n}());\r\nexports.Util = Util;\r\n\n\n//# sourceURL=webpack:///./src/librarys/Util.ts?')},"./src/scripts/WebApiControll.js":function(module,exports,__webpack_require__){"use strict";eval('\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _RequestHttp = __webpack_require__(/*! ../librarys/RequestHttp */ "./src/librarys/RequestHttp.ts");\n\nvar _Util = __webpack_require__(/*! ../librarys/Util */ "./src/librarys/Util.ts");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nvar WebApiControll = function () {\n    function WebApiControll(_Info) {\n        _classCallCheck(this, WebApiControll);\n\n        this.util = _Util.Util;\n        this.netRequest = new _RequestHttp.NetRequest(_Info.u, _Info.k, _Info.d);\n    }\n\n    _createClass(WebApiControll, [{\n        key: "getStemp",\n        value: function getStemp() {\n            return Date.parse(new Date().toString()) / 1000;\n        }\n    }, {\n        key: "uploadImg",\n        value: function uploadImg(file, data, _furl) {\n            var _this2 = this;\n\n            return new Promise(function (resolve, reject) {\n                // 获取鉴权以及上传地址\n                _this2.netRequest.requestData("GET", "/file-auth", data).then(function (data) {\n                    // resolve(data);\n                    _this2.uploadImgToAli(file, data.data);\n                }).catch(function (data) {\n                    reject(data);\n                });\n            });\n        }\n    }, {\n        key: "fetchError",\n        value: function fetchError(_error_msg) {\n            console.log("fetch error: " + _error_msg);\n        }\n\n        /**\r\n         * @param {File} _file 文件 data\r\n         * @param {String} _fpath 上传目录\r\n         * @returns {Object} {fkey, fname}\r\n         */\n\n    }, {\n        key: "uploadImgToAli",\n        value: function uploadImgToAli(_file, _fpath) {\n            var _this = this;\n\n            var _key = _Util.Util.returnHmacStr("MD5", {\n                n: "11",\n                r: _this.getStemp()\n            });\n\n            return new Promise(function (resolve, reject) {\n                _this.sparkMd5Img(_file, function (_fileMd5) {\n                    var _fname = _key + "_" + _fileMd5 + \'.jpg\';\n                    _key = _fpath + _fname;\n\n                    resolve({ fkey: _key, fname: _fname });\n                }, function (_error) {\n                    reject(_error);\n                });\n            });\n        }\n\n        /**\r\n         * @param {Base64} base64  文件 data\r\n         * @returns {Object} {fkey, fname}\r\n         */\n\n    }, {\n        key: "getFileByBase",\n        value: function getFileByBase(base64) {\n            var _this3 = this;\n\n            var _key = _Util.Util.returnHmacStr("MD5", {\n                n: "11",\n                r: this.getStemp()\n            });\n\n            return new Promise(function (resolve, reject) {\n                _this3.urltoFile(base64, _key + \'.jpg\').then(function (res) {\n                    resolve(res);\n                }).catch(function (error) {\n                    reject(error);\n                });\n            });\n        }\n\n        /**\r\n         * Base64 To File\r\n         */\n\n    }, {\n        key: "urltoFile",\n        value: function urltoFile(url, filename) {\n            var mimeType = (url.match(/^data:([^;]+);/) || \'\')[1];\n            return fetch(url).then(function (res) {\n                return res.arrayBuffer();\n            }).then(function (buf) {\n                return new File([buf], filename, { type: mimeType });\n            });\n        }\n\n        /**\r\n         * 图片文件直传 aliyun\r\n         * @param { Object } file 文件内容\r\n         * @param { Object } data file key & file name\r\n         * @param { AliAuth } authInfo 阿里云用户信息\r\n         */\n\n    }, {\n        key: "requestUploadAli",\n        value: function requestUploadAli(file, data, authInfo) {\n            return new Promise(function (resolve, reject) {\n                var client = new OSS(authInfo);\n\n                client.put(data.fkey, file).then(function (res) {\n                    resolve(res);\n                }).catch(function (err) {\n                    reject(err);\n                });\n            });\n        }\n    }, {\n        key: "sparkMd5Img",\n        value: function sparkMd5Img(file, sucesFunc, errorFunc) {\n            var blobSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice,\n                chunkSize = 2097152,\n                chunks = Math.ceil(file.size / chunkSize),\n                currentChunk = 0,\n                spark = new SparkMD5.ArrayBuffer(),\n                fileReader = new FileReader();\n\n            fileReader.onload = function (e) {\n                console.log(\'read chunk nr\', currentChunk + 1, \'of\', chunks);\n\n                spark.append(e.target.result);\n                currentChunk++;\n\n                if (currentChunk < chunks) {\n                    loadNext();\n                } else {\n                    var hexHash = spark.end(false);\n                    console.info(\'finished computed hash\', hexHash);\n                    typeof sucesFunc == "function" && sucesFunc(hexHash);\n                }\n            };\n            fileReader.onerror = function () {\n                var _msg = \'oops, something went wrong.\';\n                typeof errorFunc == "function" && errorFunc(_msg);\n            };\n\n            // 读取文件下一个切片\n            function loadNext() {\n                var start = currentChunk * chunkSize,\n                    end = start + chunkSize >= file.size ? file.size : start + chunkSize;\n                fileReader.readAsArrayBuffer(blobSlice.call(file, start, end));\n            }\n\n            loadNext();\n        }\n    }]);\n\n    return WebApiControll;\n}();\n\nwindow.WebApiControll = WebApiControll;\n\n//# sourceURL=webpack:///./src/scripts/WebApiControll.js?')}});