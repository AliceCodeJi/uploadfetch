LazyLoad=(function(doc){var env,head,pending={},pollCount=0,queue={css:[],js:[]},styleSheets=doc.styleSheets;function createNode(name,attrs){var node=doc.createElement(name),attr;for(attr in attrs){if(attrs.hasOwnProperty(attr)){node.setAttribute(attr,attrs[attr])}}return node}function finish(type){var p=pending[type],callback,urls;if(p){callback=p.callback;urls=p.urls;urls.shift();pollCount=0;if(!urls.length){callback&&callback.call(p.context,p.obj);pending[type]=null;queue[type].length&&load(type)}}}function getEnv(){var ua=navigator.userAgent;env={async:doc.createElement('script').async===true};(env.webkit=/AppleWebKit\//.test(ua))||(env.ie=/MSIE|Trident/.test(ua))||(env.opera=/Opera/.test(ua))||(env.gecko=/Gecko\//.test(ua))||(env.unknown=true)}function load(type,urls,callback,obj,context){var _finish=function(){finish(type)},isCSS=type==='css',nodes=[],i,len,node,p,pendingUrls,url;env||getEnv();if(urls){urls=typeof urls==='string'?[urls]:urls.concat();if(isCSS||env.async||env.gecko||env.opera){queue[type].push({urls:urls,callback:callback,obj:obj,context:context})}else{for(i=0,len=urls.length;i<len;++i){queue[type].push({urls:[urls[i]],callback:i===len-1?callback:null,obj:obj,context:context})}}}if(pending[type]||!(p=pending[type]=queue[type].shift())){return}head||(head=doc.head||doc.getElementsByTagName('head')[0]);pendingUrls=p.urls.concat();for(i=0,len=pendingUrls.length;i<len;++i){url=pendingUrls[i];if(isCSS){node=env.gecko?createNode('style'):createNode('link',{href:url,rel:'stylesheet'})}else{node=createNode('script',{src:url});node.async=false}node.className='lazyload';node.setAttribute('charset','utf-8');if(env.ie&&!isCSS&&'onreadystatechange'in node&&!('draggable'in node)){node.onreadystatechange=function(){if(/loaded|complete/.test(node.readyState)){node.onreadystatechange=null;_finish()}}}else if(isCSS&&(env.gecko||env.webkit)){if(env.webkit){p.urls[i]=node.href;pollWebKit()}else{node.innerHTML='@import "'+url+'";';pollGecko(node)}}else{node.onload=node.onerror=_finish}nodes.push(node)}for(i=0,len=nodes.length;i<len;++i){head.appendChild(nodes[i])}}function pollGecko(node){var hasRules;try{hasRules=!!node.sheet.cssRules}catch(ex){pollCount+=1;if(pollCount<200){setTimeout(function(){pollGecko(node)},50)}else{hasRules&&finish('css')}return}finish('css')}function pollWebKit(){var css=pending.css,i;if(css){i=styleSheets.length;while(--i>=0){if(styleSheets[i].href===css.urls[0]){finish('css');break}}pollCount+=1;if(css){if(pollCount<200){setTimeout(pollWebKit,50)}else{finish('css')}}}}return{css:function(urls,callback,obj,context){load('css',urls,callback,obj,context)},js:function(urls,callback,obj,context){load('js',urls,callback,obj,context)}}})(this.document);

var constMtsWeb = { util: { ver: '1.0.1'} };
LazyLoad.js([
    './assets/plugin/aliyun-oss-sdk.min.js?v='+constMtsWeb.util.ver,
    './assets/plugin/preload.min.js?v='+constMtsWeb.util.ver,
    './assets/plugin/spark-md5.js?v='+constMtsWeb.util.ver,
    './assets/plugin/md5.js?v='+constMtsWeb.util.ver,
    './assets/plugin/hmac-sha1.js?v='+constMtsWeb.util.ver,

    './assets/dist/WebApiControll.min.js?v='+constMtsWeb.util.ver
], function(){
    try {
        console.log('WEB VER: ' + constMtsWeb.util.ver);
        let _ImageBase = "";
        const _UpControll = new WebApiControll({
            u: "https://erapi-testing.atamts.com/v1",
            k: "ataata1234567890",
            d: true
        });
        const Util    = _UpControll.util;
        const Reader  = new FileReader();
        let inputFile = null, filePath = "",
        fileInput = document.querySelector('#fileUpload');
        fileInput.addEventListener('change', event => {
            inputFile = fileInput.files[0];
            filePath  = event.target.value;

            console.log(filePath, inputFile);
        });

        // 按钮提交上传事件处理
        document.querySelector('#fileSubmit').addEventListener('click', ()=>{
            // upLoadImageFile(inputFile);
            
            
            fileToBase(inputFile);
        });


        /**
         * 文件上传
         * @param { File } file blob 文件对象
         */
        function upLoadImageFile(file){
            // 参数1= blob 文件 对象， 参数2= 文件上传路径
            _UpControll.uploadImgToAli(file, Util.returnTimeDate('-') + '/')
            .then(res => {
                // 生成文件 key & name 成功
                requestUp(file, res);
            })
            .catch(error => {
                console.log(error);
            });
        }
        /**
         * Base 文件上传
         * @param { Image/Base } base64 base 64 图片文件
         */
        function upLoadBaseFile(base64){
            _UpControll.getFileByBase(base64)
            .then(bfile => {
                // 参数1= blob 文件 对象， 参数2= 文件上传路径
                _UpControll.uploadImgToAli(bfile, Util.returnTimeDate('-') + '/')
                .then(res => {
                    // 生成文件 key & name 成功
                    requestUp(bfile, res);
                })
                .catch(error => { console.log(error); });
            })
            .catch(error => { console.log(error); });
        }
        /**
         * @param { File } file 文件内容
         * @param { FileInfo } fInfo 文件相关信息 上传路径 & 文件名
         */
        function requestUp(file, fInfo){
            _UpControll.requestUploadAli(file, fInfo, {
                region: 'oss-cn-beijing',
                accessKeyId: 'accessKeyId',
                accessKeySecret: 'accessKeySecret',
                bucket: 'jack-xp'
            })
            .then(data => {
                // 上传成功
                if(data.res.statusCode == 200){
                    let _data = data.res;
                    let _netUrl = _data.requestUrls[0];
                    
                    console.log('aliyun url: ' + _netUrl);
                }
            })
            .catch(error => {
                console.log(error);
            });
        }







        /**
         * @param { File } file 加载文件对象
         */
        function fileToBase(file){
            Reader.readAsDataURL(file);
        }
        Reader.addEventListener('load', ()=>{
            console.log(Reader.result.length);
            _ImageBase = Reader.result;

            upLoadBaseFile(_ImageBase);
        });

    } catch (e) {
        console.log("main js: ", e);
    }
});